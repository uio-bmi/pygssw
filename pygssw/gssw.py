# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_gssw')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_gssw')
    _gssw = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gssw', [dirname(__file__)])
        except ImportError:
            import _gssw
            return _gssw
        try:
            _mod = imp.load_module('_gssw', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _gssw = swig_import_helper()
    del swig_import_helper
else:
    import _gssw
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def gssw_init(read, readLen, mat, n, start_full_length_bonus, end_full_length_bonus, score_size):
    return _gssw.gssw_init(read, readLen, mat, n, start_full_length_bonus, end_full_length_bonus, score_size)
gssw_init = _gssw.gssw_init

def gssw_create_score_matrix(match, mismatch):
    return _gssw.gssw_create_score_matrix(match, mismatch)
gssw_create_score_matrix = _gssw.gssw_create_score_matrix

def gssw_create_nt_table():
    return _gssw.gssw_create_nt_table()
gssw_create_nt_table = _gssw.gssw_create_nt_table

def gssw_node_create(data, id, seq, nt_table, score_matrix):
    return _gssw.gssw_node_create(data, id, seq, nt_table, score_matrix)
gssw_node_create = _gssw.gssw_node_create

def gssw_node_destroy(n):
    return _gssw.gssw_node_destroy(n)
gssw_node_destroy = _gssw.gssw_node_destroy

def gssw_node_add_prev(n, m):
    return _gssw.gssw_node_add_prev(n, m)
gssw_node_add_prev = _gssw.gssw_node_add_prev

def gssw_node_add_next(n, m):
    return _gssw.gssw_node_add_next(n, m)
gssw_node_add_next = _gssw.gssw_node_add_next

def gssw_nodes_add_edge(n, m):
    return _gssw.gssw_nodes_add_edge(n, m)
gssw_nodes_add_edge = _gssw.gssw_nodes_add_edge

def gssw_node_del_prev(n, m):
    return _gssw.gssw_node_del_prev(n, m)
gssw_node_del_prev = _gssw.gssw_node_del_prev

def gssw_node_del_next(n, m):
    return _gssw.gssw_node_del_next(n, m)
gssw_node_del_next = _gssw.gssw_node_del_next

def gssw_nodes_del_edge(n, m):
    return _gssw.gssw_nodes_del_edge(n, m)
gssw_nodes_del_edge = _gssw.gssw_nodes_del_edge

def gssw_node_replace_prev(n, m, p):
    return _gssw.gssw_node_replace_prev(n, m, p)
gssw_node_replace_prev = _gssw.gssw_node_replace_prev

def gssw_node_replace_next(n, m, p):
    return _gssw.gssw_node_replace_next(n, m, p)
gssw_node_replace_next = _gssw.gssw_node_replace_next

def gssw_node_fill(node, prof, weight_gapO, weight_gapE, maskLen, save_matrixes, seed):
    return _gssw.gssw_node_fill(node, prof, weight_gapO, weight_gapE, maskLen, save_matrixes, seed)
gssw_node_fill = _gssw.gssw_node_fill

def gssw_graph_fill(graph, read_seq, nt_table, score_matrix, weight_gapO, weight_gapE, start_full_length_bonus, end_full_length_bonus, maskLen, score_size, save_matrixes):
    return _gssw.gssw_graph_fill(graph, read_seq, nt_table, score_matrix, weight_gapO, weight_gapE, start_full_length_bonus, end_full_length_bonus, maskLen, score_size, save_matrixes)
gssw_graph_fill = _gssw.gssw_graph_fill

def gssw_graph_fill_qual_adj(graph, read_seq, read_qual, nt_table, adj_score_matrix, weight_gapO, weight_gapE, start_full_length_bonus, end_full_length_bonus, maskLen, score_size, save_matrixes):
    return _gssw.gssw_graph_fill_qual_adj(graph, read_seq, read_qual, nt_table, adj_score_matrix, weight_gapO, weight_gapE, start_full_length_bonus, end_full_length_bonus, maskLen, score_size, save_matrixes)
gssw_graph_fill_qual_adj = _gssw.gssw_graph_fill_qual_adj

def gssw_graph_create(size):
    return _gssw.gssw_graph_create(size)
gssw_graph_create = _gssw.gssw_graph_create

def gssw_graph_add_node(graph, node):
    return _gssw.gssw_graph_add_node(graph, node)
gssw_graph_add_node = _gssw.gssw_graph_add_node

def gssw_graph_print_score_matrices(graph, read, readLen, out):
    return _gssw.gssw_graph_print_score_matrices(graph, read, readLen, out)
gssw_graph_print_score_matrices = _gssw.gssw_graph_print_score_matrices

def gssw_graph_trace_back(graph, read, readLen, nt_table, score_matrix, gap_open, gap_extension, start_full_length_bonus, end_full_length_bonus):
    return _gssw.gssw_graph_trace_back(graph, read, readLen, nt_table, score_matrix, gap_open, gap_extension, start_full_length_bonus, end_full_length_bonus)
gssw_graph_trace_back = _gssw.gssw_graph_trace_back

def test_wrapper(graph, read, readLen, nt_table, score_matrix, gap_open, gap_extension, start_full_length_bonus, end_full_length_bonus):
    return _gssw.test_wrapper(graph, read, readLen, nt_table, score_matrix, gap_open, gap_extension, start_full_length_bonus, end_full_length_bonus)
test_wrapper = _gssw.test_wrapper
# This file is compatible with both classic and new-style classes.


